package com.example.linguause_mvp.ui

import android.os.Bundle
import android.view.View
import android.widget.*
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import com.example.linguause_mvp.R
import android.speech.RecognitionListener
import android.speech.RecognizerIntent
import android.speech.SpeechRecognizer
import android.content.Intent
import android.app.AlertDialog
import android.util.Log
import android.content.DialogInterface
import com.example.linguause_mvp.ui.SentenceGameViewModel

class SentenceGameFragment : Fragment(R.layout.fragment_sentence_game) {

    private var speechRecognizer: SpeechRecognizer? = null
    private var isListening = false
    private lateinit var viewModel: SentenceGameViewModel


    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        Log.d("DEBUG_FLOW", "onViewCreated —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª")


        val progressContainer: LinearLayout = view.findViewById(R.id.progress_container)
        Log.d("DEBUG_FLOW", "‚úîÔ∏è progressContainer –ø–æ–¥–∫–ª—é—á—ë–Ω")

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º ViewModel
        viewModel = ViewModelProvider(this)[SentenceGameViewModel::class.java]
        Log.d("DEBUG_FLOW", "viewModel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


// –ü–æ–¥–∫–ª—é—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑ layout
        val container: LinearLayout = view.findViewById(R.id.word_container)
        Log.d("DEBUG_FLOW", "‚úîÔ∏è container –ø–æ–¥–∫–ª—é—á—ë–Ω")

        val userInputText: TextView = view.findViewById(R.id.user_input_text)
        Log.d("DEBUG_FLOW", "‚úîÔ∏è userInputText –ø–æ–¥–∫–ª—é—á—ë–Ω")

        val resultText: TextView = view.findViewById(R.id.result_text)
        Log.d("DEBUG_FLOW", "‚úîÔ∏è resultText –ø–æ–¥–∫–ª—é—á—ë–Ω")

        val soundButton: ImageView = view.findViewById(R.id.sound_button)
        Log.d("DEBUG_FLOW", "‚úîÔ∏è soundButton –ø–æ–¥–∫–ª—é—á—ë–Ω")

        val undoButton: Button = view.findViewById(R.id.undo_button)
        Log.d("DEBUG_FLOW", "‚úîÔ∏è undoButton –ø–æ–¥–∫–ª—é—á—ë–Ω")

        val overlay: View = view.findViewById(R.id.click_overlay)
        Log.d("DEBUG_FLOW", "‚úîÔ∏è overlay –ø–æ–¥–∫–ª—é—á—ë–Ω")

        val micButton: Button = view.findViewById(R.id.mic_button)
        Log.d("DEBUG_FLOW", "‚úîÔ∏è micButton –ø–æ–¥–∫–ª—é—á—ë–Ω")


// –°–ª—É—à–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
        viewModel.wordOptions.observe(viewLifecycleOwner) { options ->
            Log.d("DEBUG_FLOW", "viewModel: –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤")
            container.removeAllViews()
            options.forEach { word ->
                val btn = Button(requireContext())
                btn.text = word
                btn.setOnClickListener { viewModel.addWord(word) }
                container.addView(btn)
            }
        }

// –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –≤–≤–æ–¥–µ
        viewModel.userInput.observe(viewLifecycleOwner) {
            Log.d("DEBUG_FLOW", "viewModel: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø. –≤–≤–æ–¥–µ")

            userInputText.text = it.joinToString(" ")
        }

// üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–∫—Ä—É–∂–æ—á–∫–∏)
        viewModel.progressList.observe(viewLifecycleOwner) { progress ->
            progressContainer.removeAllViews()
            Log.d("DEBUG_FLOW", "viewModel: –æ–±–Ω–æ–≤–∏–ª–∏ –≤–∏–∑. –ø—Ä–æ–≥—Ä–∞—Å—Å")

            for (item in progress) {
                val dot = View(requireContext())
                dot.layoutParams = LinearLayout.LayoutParams(24, 24).apply {
                    setMargins(6, 0, 6, 0)
                }

                dot.setBackgroundResource(
                    when (item) {
                        1 -> R.drawable.dot_green
                        0 -> R.drawable.dot_orange
                        -1 -> R.drawable.dot_red
                        else -> android.R.color.darker_gray
                    }
                )

                progressContainer.addView(dot)
            }
        }

// –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–±–æ—Ä ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        viewModel.isCompleted.observe(viewLifecycleOwner) { completed ->
            Log.d("DEBUG_FLOW", "viewModel: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

            if (completed) {
                val correct = viewModel.isCorrect.value == true
                val resultMessage = if (correct) {
                    "üëç –û—Ç–ª–∏—á–Ω–æ!"
                } else {
                    "‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏:\n${viewModel.getUserAnswer()}\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ:\n${viewModel.getCorrectAnswer()}"
                }

                resultText.text = resultMessage
                resultText.visibility = View.VISIBLE
                soundButton.visibility = View.VISIBLE
                overlay.visibility = View.VISIBLE
            }
        }

// –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ¬ª
        undoButton.setOnClickListener {
            viewModel.removeLastWord()
        }

// –ö–ª–∏–∫ –ø–æ —Ñ–æ–Ω—É ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
        overlay.setOnClickListener {
            viewModel.startNewSentence()
            Log.d("DEBUG_FLOW", "viewModel: –ø–µ—Ä–µ—Ö–æ–¥ —É —Å–ª–µ–¥. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é")

            resultText.visibility = View.GONE
            soundButton.visibility = View.GONE
            overlay.visibility = View.GONE
        }

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        viewModel.startNewSentence()
        Log.d("DEBUG_FLOW", "viewModel: –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")

    }

    // üîä –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ (SpeechRecognizer)
    private fun startSpeechRecognition() {
        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
            putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
            putExtra(RecognizerIntent.EXTRA_LANGUAGE, "en-US")
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ SpeechRecognizer –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        if (!SpeechRecognizer.isRecognitionAvailable(requireContext())) {
            Toast.makeText(requireContext(), "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", Toast.LENGTH_SHORT).show()
            return
        }

        // –°–æ–∑–¥–∞—ë–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
        speechRecognizer = SpeechRecognizer.createSpeechRecognizer(requireContext())
        speechRecognizer?.setRecognitionListener(object : RecognitionListener {
            override fun onReadyForSpeech(params: Bundle?) { isListening = true }
            override fun onError(error: Int) { isListening = false }
            override fun onBeginningOfSpeech() {}
            override fun onBufferReceived(buffer: ByteArray?) {}
            override fun onEndOfSpeech() {}
            override fun onEvent(eventType: Int, params: Bundle?) {}
            override fun onPartialResults(partialResults: Bundle?) {}
            override fun onRmsChanged(rmsdB: Float) {}

            // üìå –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ç–µ–∫—Å—Ç–æ–º
            override fun onResults(results: Bundle?) {
                isListening = false
                val spoken = results?.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION)
                    ?.firstOrNull()
                    ?.trim()
                    ?.lowercase()

                if (spoken != null) {
                    showConfirmSpeechDialog(spoken)
                }
            }
        })

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
        speechRecognizer?.startListening(intent)
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    private fun showConfirmSpeechDialog(text: String) {
        AlertDialog.Builder(requireContext())
            .setTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            .setMessage("–í—ã —Å–∫–∞–∑–∞–ª–∏: \"$text\"")
            .setPositiveButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å") { _, _ ->
                // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ ViewModel
                val words = text.split(" ")
                for (word in words) {
                    viewModel.addWord(word)
                }
            }
            .setNegativeButton("‚ùå –û—Ç–º–µ–Ω–∞", null)
            .show()
    }

}