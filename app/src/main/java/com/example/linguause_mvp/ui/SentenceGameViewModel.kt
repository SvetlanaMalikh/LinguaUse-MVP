package com.example.linguause_mvp.ui

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.example.linguause_mvp.data.GrammarTemplates
import com.example.linguause_mvp.data.UserVocabulary
import com.example.linguause_mvp.logic.SentenceGenerator
import android.util.Log
import android.app.Application
import com.example.linguause_mvp.model.DatabaseProvider
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.launch





class SentenceGameViewModel(application: Application) : AndroidViewModel(application) {

    // –•—Ä–∞–Ω–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: 1 - –≤–µ—Ä–Ω–æ, -1 - –æ—à–∏–±–∫–∞, 0 - –∏—Å–ø—Ä–∞–≤–∏–ª
    private val _progressList = MutableLiveData<MutableList<Int>>(mutableListOf())
    val progressList: LiveData<MutableList<Int>> = _progressList

    // –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    private val _wordOptions = MutableLiveData<List<String>>()
    val wordOptions: LiveData<List<String>> = _wordOptions

    // –¢–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    private val _userInput = MutableLiveData<List<String>>(emptyList())
    val userInput: LiveData<List<String>> = _userInput

    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    private lateinit var correctSequence: List<String>

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    private lateinit var correctAnswer: String

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã
    private val _isCompleted = MutableLiveData<Boolean>(false)
    val isCompleted: LiveData<Boolean> = _isCompleted

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
    private val _isCorrect = MutableLiveData<Boolean?>(null)
    val isCorrect: LiveData<Boolean?> = _isCorrect

    fun startNewSentence() {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É (—Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫), —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        viewModelScope.launch {
            // –ü–æ–ª—É—á–∞–µ–º DAO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            val dao = DatabaseProvider.getDatabase(getApplication()).wordDao()

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ UserVocabulary
            UserVocabulary.initializeFromDatabase(dao)

            // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
            startSentence()
        }
    }

    // –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ)
    private fun startSentence() {
        Log.d("DEBUG_FLOW", "üîÅ startSentence() –≤—ã–∑–≤–∞–Ω")

        // üß± –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ (–≤ –±—É–¥—É—â–µ–º ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        val template = GrammarTemplates.presentSimpleNegative
        Log.d("DEBUG_FLOW", "üìö –®–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞–Ω: ${template.name}")

        // üì¶ –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ UserVocabulary (–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å)
        val userWords = UserVocabulary.getAllWordsForGame()
        Log.d("DEBUG_FLOW", "üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: ${userWords.size}")

        // üõ† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        val generator = SentenceGenerator(template, userWords)
        Log.d("DEBUG_FLOW", "‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")

        // üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        val generated = generator.generate()
        Log.d("DEBUG_FLOW", "üì§ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${generated.correctAnswer}")

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        correctSequence = generated.correctSequence
        correctAnswer = generated.correctAnswer
        _wordOptions.value = generated.options
        _userInput.value = emptyList()
        _isCompleted.value = false
        _isCorrect.value = null
        Log.d("DEBUG_FLOW", "üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞")
    }

    fun addWord(word: String) {
        // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
        if (_isCompleted.value == true) return

        val updated = _userInput.value.orEmpty().toMutableList()
        updated.add(word)
        _userInput.value = updated

        // –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if (updated.size == correctSequence.size) {
            checkAnswer(updated)
        }
    }

    fun removeLastWord() {
        val current = _userInput.value.orEmpty().toMutableList()
        if (current.isNotEmpty()) {
            current.removeAt(current.lastIndex) // ‚úÖ –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
            _userInput.value = current          // –û–±–Ω–æ–≤–ª—è–µ–º LiveData
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
    private fun checkAnswer(answer: List<String>) {
        _isCompleted.value = true
        val isCorrectNow = answer == correctSequence
        _isCorrect.value = isCorrectNow

        // –ö–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: 1 = –≤–µ—Ä–Ω–æ, 0 = –æ—à–∏–±–∫–∞ ‚Üí –∏—Å–ø—Ä–∞–≤–∏–ª, -1 = –æ—à–∏–±–∫–∞
        val code = when {
            isCorrectNow && answer.size == correctSequence.size -> 1      // üü¢
            isCorrectNow -> 0                                             // üüß
            else -> -1                                                    // üî¥
        }

        _progressList.value?.add(code)
        _progressList.value = _progressList.value // —Ç—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }

    fun getCorrectAnswer(): String = correctAnswer
    fun getUserAnswer(): String = _userInput.value?.joinToString(" ") ?: ""
}